/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package headshot.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Headshot extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Headshot\",\"namespace\":\"headshot.avro\",\"fields\":[{\"name\":\"user_id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"game_id\",\"type\":\"int\"},{\"name\":\"map_id\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int user_id;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public int game_id;
  @Deprecated public int map_id;
  @Deprecated public long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Headshot() {}

  /**
   * All-args constructor.
   */
  public Headshot(java.lang.Integer user_id, java.lang.CharSequence name, java.lang.Integer game_id, java.lang.Integer map_id, java.lang.Long timestamp) {
    this.user_id = user_id;
    this.name = name;
    this.game_id = game_id;
    this.map_id = map_id;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user_id;
    case 1: return name;
    case 2: return game_id;
    case 3: return map_id;
    case 4: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user_id = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: game_id = (java.lang.Integer)value$; break;
    case 3: map_id = (java.lang.Integer)value$; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user_id' field.
   */
  public java.lang.Integer getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.Integer value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'game_id' field.
   */
  public java.lang.Integer getGameId() {
    return game_id;
  }

  /**
   * Sets the value of the 'game_id' field.
   * @param value the value to set.
   */
  public void setGameId(java.lang.Integer value) {
    this.game_id = value;
  }

  /**
   * Gets the value of the 'map_id' field.
   */
  public java.lang.Integer getMapId() {
    return map_id;
  }

  /**
   * Sets the value of the 'map_id' field.
   * @param value the value to set.
   */
  public void setMapId(java.lang.Integer value) {
    this.map_id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /** Creates a new Headshot RecordBuilder */
  public static headshot.avro.Headshot.Builder newBuilder() {
    return new headshot.avro.Headshot.Builder();
  }
  
  /** Creates a new Headshot RecordBuilder by copying an existing Builder */
  public static headshot.avro.Headshot.Builder newBuilder(headshot.avro.Headshot.Builder other) {
    return new headshot.avro.Headshot.Builder(other);
  }
  
  /** Creates a new Headshot RecordBuilder by copying an existing Headshot instance */
  public static headshot.avro.Headshot.Builder newBuilder(headshot.avro.Headshot other) {
    return new headshot.avro.Headshot.Builder(other);
  }
  
  /**
   * RecordBuilder for Headshot instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Headshot>
    implements org.apache.avro.data.RecordBuilder<Headshot> {

    private int user_id;
    private java.lang.CharSequence name;
    private int game_id;
    private int map_id;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(headshot.avro.Headshot.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(headshot.avro.Headshot.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.game_id)) {
        this.game_id = data().deepCopy(fields()[2].schema(), other.game_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.map_id)) {
        this.map_id = data().deepCopy(fields()[3].schema(), other.map_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Headshot instance */
    private Builder(headshot.avro.Headshot other) {
            super(headshot.avro.Headshot.SCHEMA$);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.game_id)) {
        this.game_id = data().deepCopy(fields()[2].schema(), other.game_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.map_id)) {
        this.map_id = data().deepCopy(fields()[3].schema(), other.map_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'user_id' field */
    public java.lang.Integer getUserId() {
      return user_id;
    }
    
    /** Sets the value of the 'user_id' field */
    public headshot.avro.Headshot.Builder setUserId(int value) {
      validate(fields()[0], value);
      this.user_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'user_id' field has been set */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'user_id' field */
    public headshot.avro.Headshot.Builder clearUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public headshot.avro.Headshot.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public headshot.avro.Headshot.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'game_id' field */
    public java.lang.Integer getGameId() {
      return game_id;
    }
    
    /** Sets the value of the 'game_id' field */
    public headshot.avro.Headshot.Builder setGameId(int value) {
      validate(fields()[2], value);
      this.game_id = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'game_id' field has been set */
    public boolean hasGameId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'game_id' field */
    public headshot.avro.Headshot.Builder clearGameId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'map_id' field */
    public java.lang.Integer getMapId() {
      return map_id;
    }
    
    /** Sets the value of the 'map_id' field */
    public headshot.avro.Headshot.Builder setMapId(int value) {
      validate(fields()[3], value);
      this.map_id = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'map_id' field has been set */
    public boolean hasMapId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'map_id' field */
    public headshot.avro.Headshot.Builder clearMapId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public headshot.avro.Headshot.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'timestamp' field */
    public headshot.avro.Headshot.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Headshot build() {
      try {
        Headshot record = new Headshot();
        record.user_id = fieldSetFlags()[0] ? this.user_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.game_id = fieldSetFlags()[2] ? this.game_id : (java.lang.Integer) defaultValue(fields()[2]);
        record.map_id = fieldSetFlags()[3] ? this.map_id : (java.lang.Integer) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
